name: Deploy to EC2

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-ecr-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME : ${{ secrets.EC2_HOSTNAME }}
        USER_NAME : ${{ secrets.EC2_USER_NAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          # Stop running container
          docker stop $(docker ps -a -q)
          # Remove old container
          docker rm $(docker ps -a -q)
          # Remove old image
          docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Pull latest image
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Run latest image
          docker run -d $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        '
